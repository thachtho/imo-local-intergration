version: '2.1'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    restart: always
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    restart: always
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
  postgres:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=111111
      - POSTGRES_DB=demo
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
  imo-local-intergration:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: imoLocalIntergration
    restart: always
    ports:
      - '2999:2999'
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=root
      - DB_PASSWORD=111111
      - DB_DATABASE=demo
  imo-bff:
    build:
      context: ./../imo-bff
      dockerfile: Dockerfile
    container_name: imoBff
    restart: always
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
      - USER_SERVICE_HOST=user-service:5001
      - ROLE_SERVICE_HOST=role-service:5002
    ports:
      - '3000:3000'
  auth-service:
    build:
      context: ./../auth-service
      dockerfile: Dockerfile
    container_name: authService
    restart: always
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=root
      - DB_PASSWORD=111111
      - DB_DATABASE=demo
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
      - USERSERVICE_HOST=user-service:5001
    ports:
      - '5000:5000'
  user-service:
    build:
      context: ./../user-service
      dockerfile: Dockerfile
    container_name: userService
    restart: always
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=root
      - DB_PASSWORD=111111
      - DB_DATABASE=demo
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
    ports:
      - '5001:5001'
  role-service:
    build:
      context: ./../role-service
      dockerfile: Dockerfile
    container_name: roleService
    restart: always
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=root
      - DB_PASSWORD=111111
      - DB_DATABASE=demo
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
    ports:
      - '5002:5002'
volumes:
  postgres-volume:
    driver: local
